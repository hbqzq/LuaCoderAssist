{
  "name": "luacoderassist",
  "displayName": "LuaCoderAssist",
  "description": "lua coder assistant in javascript for vscode",
  "icon": "images/icon.png",
  "version": "2.1.1",
  "publisher": "liwangqian",
  "engines": {
    "vscode": "^1.25.0"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Snippets",
    "Formatters"
  ],
  "keywords": [
    "lua",
    "code",
    "assist",
    "intelligence"
  ],
  "activationEvents": [
    "onLanguage:lua"
  ],
  "main": "./client/extension",
  "contributes": {
    "commands": [
      {
        "command": "LuaCoderAssist.ldoc",
        "title": "插入注释(Insert Lua Document)"
      },
      {
        "command": "LuaCoderAssist.metrics.details",
        "title": "显示代码度量详细信息(Show Code Metrics Details)"
      },
      {
        "command": "LuaCoderAssist.busted.activate",
        "title": "进入busted模式(Enter busted mode)"
      },
      {
        "command": "LuaCoderAssist.busted.deactivate",
        "title": "退出busted模式(Exit busted mode)"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "LuaCoderAssist.ldoc",
          "when": "resourceLangId == lua",
          "group": "1_modification"
        }
      ]
    },
    "configuration": {
      "type": "Object",
      "title": "Lua Coder Assistant Configuration",
      "properties": {
        "LuaCoderAssist.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the extension."
        },
        "LuaCoderAssist.debug": {
          "type": "boolean",
          "default": false,
          "description": "Debug information output enable."
        },
        "LuaCoderAssist.preloads": {
          "type": "array",
          "default": [],
          "description": "Preload modules path."
        },
        "LuaCoderAssist.useLove": {
          "type": "boolean",
          "default": false,
          "description": "Use `LOVE` libraries."
        },
        "LuaCoderAssist.useJit": {
          "type": "boolean",
          "default": false,
          "description": "Use `LuaJit` libraries."
        },
        "LuaCoderAssist.luaPath": {
          "type": "string",
          "default": "",
          "description": "Provide the lua path to help find the rigth module path, when there is some modules with same file name.",
          "examples": [
            "{workspaceRoot}/pathA/subPath0/subPath1/?.lua;{workspaceRoot}/pathB/subPath0/subPath1/?.lua"
          ]
        },
        "LuaCoderAssist.search.filters": {
          "type": "array",
          "default": [],
          "description": "Filter patterns for file search."
        },
        "LuaCoderAssist.search.externalPaths": {
          "type": "array",
          "default": [],
          "description": "External paths outside the workspaceroot to be search."
        },
        "LuaCoderAssist.search.followLinks": {
          "type": "boolean",
          "default": false,
          "description": "Whether the links to be search."
        },
        "LuaCoderAssist.luaparse.luaversion": {
          "type": "number",
          "default": 5.1,
          "enum": [
            5.1,
            5.2,
            5.3
          ],
          "description": "The lua version, for grammer match."
        },
        "LuaCoderAssist.luaparse.allowDefined": {
          "type": "boolean",
          "default": false,
          "description": "Allow defining globals implicitly by setting them."
        },
        "LuaCoderAssist.luacheck.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/Disable luacheck for static diagnostics."
        },
        "LuaCoderAssist.luacheck.automaticOption": {
          "type": "boolean",
          "default": true,
          "description": "Define the luacheck cli options automatically."
        },
        "LuaCoderAssist.luacheck.options": {
          "type": "array",
          "default": [
            "-m",
            "-t"
          ],
          "description": "Cli options for luacheck, see [luacheck](https://luacheck.readthedocs.io/en/stable/cli.html#command-line-options) for details."
        },
        "LuaCoderAssist.luacheck.onSave": {
          "type": "boolean",
          "default": true,
          "description": "Run luacheck when file saved."
        },
        "LuaCoderAssist.luacheck.onTyping": {
          "type": "boolean",
          "default": true,
          "description": "Run luacheck when file changed."
        },
        "LuaCoderAssist.luacheck.execPath": {
          "type": "string",
          "default": null,
          "description": "Path of the luacheck excutable.(@ref https://github.com/mpeterv/luacheck)"
        },
        "LuaCoderAssist.luacheck.std": {
          "type": "array",
          "default": [
            "busted"
          ],
          "description": "Set standard globals.(@ref https://luacheck.readthedocs.io/en/stable/cli.html#command-line-options)"
        },
        "LuaCoderAssist.luacheck.ignore": {
          "type": "array",
          "default": [],
          "description": "Filter out warnings matching patterns.(@ref http://luacheck.readthedocs.io/en/stable/cli.html)"
        },
        "LuaCoderAssist.luacheck.globals": {
          "type": "array",
          "default": [],
          "description": "Add read-only global variables or fields.(@ref https://luacheck.readthedocs.io/en/stable/cli.html)"
        },
        "LuaCoderAssist.luacheck.jobs": {
          "type": "integer",
          "default": 1,
          "description": "Number of jobs for parallel check.(@ref http://luacheck.readthedocs.io/en/stable/cli.html)"
        },
        "LuaCoderAssist.luacheck.fileSizeLimit": {
          "type": "integer",
          "default": 100,
          "description": "File size (KB) limit for luacheck, performance consideration."
        },
        "LuaCoderAssist.luacheck.maxProblems": {
          "type": "integer",
          "default": 250,
          "description": "Max problems to show."
        },
        "LuaCoderAssist.luacheck.configFilePath": {
          "type": "string",
          "default": "",
          "description": "The path of '.luacheckrc'."
        },
        "LuaCoderAssist.luacheck.keepAfterClosed": {
          "type": "boolean",
          "default": true,
          "description": "Keep diagnostic information after document closed."
        },
        "LuaCoderAssist.format.lineWidth": {
          "type": "integer",
          "default": 120,
          "description": "Max character in one line. [Obsoleted]"
        },
        "LuaCoderAssist.format.indentCount": {
          "type": "integer",
          "default": 4,
          "description": "Indent count."
        },
        "LuaCoderAssist.format.quotemark": {
          "type": "string",
          "default": "single",
          "description": "String quotation style, can be 'single' or 'double'. [Obsoleted]"
        },
        "LuaCoderAssist.format.useTabs": {
          "type": "boolean",
          "default": false,
          "description": "Use tabs instead of spaces to indent."
        },
        "LuaCoderAssist.format.formatComments": {
          "type": "boolean",
          "default": false,
          "description": "Format multi-line comments with indentations."
        },
        "LuaCoderAssist.ldoc.authorInFunctionLevel": {
          "type": "boolean",
          "default": true,
          "description": "Whether @author add to function level document."
        },
        "LuaCoderAssist.ldoc.authorName": {
          "type": "string",
          "default": "",
          "description": "The author name."
        },
        "LuaCoderAssist.metric.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable/Disable the code metric codeLens."
        },
        "LuaCoderAssist.metric.logicalLineMax": {
          "type": "integer",
          "default": 50,
          "description": "The max logical line of a function."
        },
        "LuaCoderAssist.metric.physicalLineMax": {
          "type": "integer",
          "default": 80,
          "description": "The max physical line of a function."
        },
        "LuaCoderAssist.metric.cyclomaticMax": {
          "type": "integer",
          "default": 10,
          "description": "The max complexity of a function."
        },
        "LuaCoderAssist.metric.maintainabilityMin": {
          "type": "integer",
          "default": 60,
          "description": "The minimum maintainability index of a function."
        }
      }
    },
    "snippets": [
      {
        "language": "lua",
        "path": "./snippets/ldoc.json"
      },
      {
        "language": "lua",
        "path": "./snippets/lua.json"
      }
    ]
  },
  "scripts": {
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "node ./node_modules/vscode/bin/test"
  },
  "bin": {
    "lua-coder-assist": "server/server-stdio.js"
  },
  "dependencies": {
    "autodetect-decoder-stream": "^1.0.0",
    "check-types": "~4",
    "escomplex": "0.2.5",
    "escomplex-traits": "0.2.x",
    "iconv-lite": "^0.4.24",
    "jschardet": "^1.6.0",
    "lodash": "^4.17.4",
    "lua-fmt": "^2.3.0",
    "luaparse": "^0.2.1",
    "opn": "^5.1.0",
    "tree-kill": "^1.2.0",
    "underscore": "^1.9.0",
    "vscode-languageclient": "^5.0.0",
    "vscode-languageserver": "^5.0.0",
    "vscode-uri": "^1.0.1",
    "walk": "^2.3.9"
  },
  "devDependencies": {
    "typescript": "^2.0.3",
    "vscode": "^1.0.0",
    "mocha": "^2.3.3",
    "eslint": "^3.6.0",
    "@types/node": "^6.0.40",
    "@types/mocha": "^2.2.32"
  },
  "homepage": "https://github.com/liwangqian/LuaCoderAssist/blob/master/README.md",
  "bugs": {
    "url": "https://github.com/liwangqian/LuaCoderAssist/issues",
    "email": "liwangqian87@163.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/liwangqian/LuaCoderAssist"
  }
}